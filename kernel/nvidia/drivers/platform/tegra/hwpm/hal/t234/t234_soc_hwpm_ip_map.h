/*
 * Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef T234_SOC_HWPM_IP_MAP_H
#define T234_SOC_HWPM_IP_MAP_H

#include <tegra-soc-hwpm-io.h>
#include <hal/t234/t234_soc_hwpm_regops_allowlist.h>
#include <hal/t234/t234_soc_hwpm_perfmon_dt.h>

/*
 * Aperture Ranges (start_pa/end_pa):
 *    - start_pa and end_pa is 0 for PERFMON, PMA, and RTR apertures. These
 *      ranges will be extracted from the device tree.
 *    - IP apertures are not listed in the device tree because we don't map them.
 *      Therefore, start_pa and end_pa for IP apertures are hardcoded here. IP
 *      apertures are listed here because we need to track their allowlists.
 */
struct hwpm_resource_aperture t234_vi_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_VI0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_VI0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_VI0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_VI1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_VI1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_VI1_PERFMON_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = addr_map_vi_thi_base_r(),
		.end_pa = addr_map_vi_thi_limit_r(),
		.start_abs_pa = addr_map_vi_thi_base_r(),
		.end_abs_pa = addr_map_vi_thi_limit_r(),
		.fake_registers = NULL,
		.alist = t234_vi_thi_alist,
		.alist_size = ARRAY_SIZE(t234_vi_thi_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_vi2_thi_base_r(),
		.end_pa = addr_map_vi2_thi_limit_r(),
		.start_abs_pa = addr_map_vi2_thi_base_r(),
		.end_abs_pa = addr_map_vi2_thi_limit_r(),
		.fake_registers = NULL,
		.alist = t234_vi_thi_alist,
		.alist_size = ARRAY_SIZE(t234_vi_thi_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x2U,
	},
};

struct hwpm_resource_aperture t234_isp_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_ISP0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_ISP0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_ISP0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_isp_thi_base_r(),
		.end_pa = addr_map_isp_thi_limit_r(),
		.start_abs_pa = addr_map_isp_thi_base_r(),
		.end_abs_pa = addr_map_isp_thi_limit_r(),
		.fake_registers = NULL,
		.alist = t234_isp_thi_alist,
		.alist_size = ARRAY_SIZE(t234_isp_thi_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_vic_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_VICA0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_VICA0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_VICA0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_vic_base_r(),
		.end_pa = addr_map_vic_limit_r(),
		.start_abs_pa = addr_map_vic_base_r(),
		.end_abs_pa = addr_map_vic_limit_r(),
		.fake_registers = NULL,
		.alist = t234_vic_alist,
		.alist_size = ARRAY_SIZE(t234_vic_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_ofa_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_OFAA0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_OFAA0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_OFAA0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_ofa_base_r(),
		.end_pa = addr_map_ofa_limit_r(),
		.start_abs_pa = addr_map_ofa_base_r(),
		.end_abs_pa = addr_map_ofa_limit_r(),
		.fake_registers = NULL,
		.alist = t234_ofa_alist,
		.alist_size = ARRAY_SIZE(t234_ofa_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_pva_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PVAV0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PVAV0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PVAV0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PVAV1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PVAV1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PVAV1_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PVAC0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PVAC0_PERFMON_DT),
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.fake_registers = NULL,
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PVAC0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_pva0_pm_base_r(),
		.end_pa = addr_map_pva0_pm_limit_r(),
		.start_abs_pa = addr_map_pva0_pm_base_r(),
		.end_abs_pa = addr_map_pva0_pm_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pva0_pm_alist,
		.alist_size = ARRAY_SIZE(t234_pva0_pm_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_nvdla_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_NVDLAB0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_NVDLAB0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_NVDLAB0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_NVDLAB1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_NVDLAB1_PERFMON_DT),
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.fake_registers = NULL,
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_NVDLAB1_PERFMON_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = addr_map_nvdla0_base_r(),
		.end_pa = addr_map_nvdla0_limit_r(),
		.start_abs_pa = addr_map_nvdla0_base_r(),
		.end_abs_pa = addr_map_nvdla0_limit_r(),
		.fake_registers = NULL,
		.alist = t234_nvdla_alist,
		.alist_size = ARRAY_SIZE(t234_nvdla_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_nvdla1_base_r(),
		.end_pa = addr_map_nvdla1_limit_r(),
		.start_abs_pa = addr_map_nvdla1_base_r(),
		.end_abs_pa = addr_map_nvdla1_limit_r(),
		.fake_registers = NULL,
		.alist = t234_nvdla_alist,
		.alist_size = ARRAY_SIZE(t234_nvdla_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x2U,
	},
};

struct hwpm_resource_aperture t234_mgbe_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MGBE0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MGBE0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MGBE0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MGBE1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MGBE1_PERFMON_DT),
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.fake_registers = NULL,
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MGBE1_PERFMON_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MGBE2_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MGBE2_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MGBE2_PERFMON_DT,
		.index_mask = 0x4U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MGBE3_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MGBE3_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MGBE3_PERFMON_DT,
		.index_mask = 0x8U,
	},
	{
		.start_pa = addr_map_mgbe0_base_r(),
		.end_pa = addr_map_mgbe0_limit_r(),
		.start_abs_pa = addr_map_mgbe0_base_r(),
		.end_abs_pa = addr_map_mgbe0_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mgbe_alist,
		.alist_size = ARRAY_SIZE(t234_mgbe_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mgbe1_base_r(),
		.end_pa = addr_map_mgbe1_limit_r(),
		.start_abs_pa = addr_map_mgbe1_base_r(),
		.end_abs_pa = addr_map_mgbe1_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mgbe_alist,
		.alist_size = ARRAY_SIZE(t234_mgbe_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = addr_map_mgbe2_base_r(),
		.end_pa = addr_map_mgbe2_limit_r(),
		.start_abs_pa = addr_map_mgbe2_base_r(),
		.end_abs_pa = addr_map_mgbe2_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mgbe_alist,
		.alist_size = ARRAY_SIZE(t234_mgbe_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x4U,
	},
	{
		.start_pa = addr_map_mgbe3_base_r(),
		.end_pa = addr_map_mgbe3_limit_r(),
		.start_abs_pa = addr_map_mgbe3_base_r(),
		.end_abs_pa = addr_map_mgbe3_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mgbe_alist,
		.alist_size = ARRAY_SIZE(t234_mgbe_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x8U,
	},
};

struct hwpm_resource_aperture t234_scf_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_SCF0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_SCF0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_SCF0_PERFMON_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_nvdec_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_NVDECA0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_NVDECA0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_NVDECA0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_nvdec_base_r(),
		.end_pa = addr_map_nvdec_limit_r(),
		.start_abs_pa = addr_map_nvdec_base_r(),
		.end_abs_pa = addr_map_nvdec_limit_r(),
		.fake_registers = NULL,
		.alist = t234_nvdec_alist,
		.alist_size = ARRAY_SIZE(t234_nvdec_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_nvenc_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_NVENCA0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_NVENCA0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_NVENCA0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_nvenc_base_r(),
		.end_pa = addr_map_nvenc_limit_r(),
		.start_abs_pa = addr_map_nvenc_base_r(),
		.end_abs_pa = addr_map_nvenc_limit_r(),
		.fake_registers = NULL,
		.alist = t234_nvenc_alist,
		.alist_size = ARRAY_SIZE(t234_nvenc_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_pcie_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE1_PERFMON_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE2_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE2_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE2_PERFMON_DT,
		.index_mask = 0x4U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE3_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE3_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE3_PERFMON_DT,
		.index_mask = 0x8U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE4_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE4_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE4_PERFMON_DT,
		.index_mask = 0x10U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE5_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE5_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE5_PERFMON_DT,
		.index_mask = 0x20U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE6_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE6_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE6_PERFMON_DT,
		.index_mask = 0x40U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE7_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE7_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE7_PERFMON_DT,
		.index_mask = 0x80U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE8_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE8_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE8_PERFMON_DT,
		.index_mask = 0x100U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE9_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE9_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE9_PERFMON_DT,
		.index_mask = 0x200U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_PCIE10_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_PCIE10_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PCIE10_PERFMON_DT,
		.index_mask = 0x400U,
	},
	{
		.start_pa = addr_map_pcie_c0_ctl_base_r(),
		.end_pa = addr_map_pcie_c0_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c0_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c0_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_pcie_c1_ctl_base_r(),
		.end_pa = addr_map_pcie_c1_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c1_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c1_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = addr_map_pcie_c2_ctl_base_r(),
		.end_pa = addr_map_pcie_c2_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c2_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c2_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x4U,
	},
	{
		.start_pa = addr_map_pcie_c3_ctl_base_r(),
		.end_pa = addr_map_pcie_c3_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c3_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c3_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x8U,
	},
	{
		.start_pa = addr_map_pcie_c4_ctl_base_r(),
		.end_pa = addr_map_pcie_c4_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c4_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c4_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x10U,
	},
	{
		.start_pa = addr_map_pcie_c5_ctl_base_r(),
		.end_pa = addr_map_pcie_c5_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c5_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c5_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x20U,
	},
	{
		.start_pa = addr_map_pcie_c6_ctl_base_r(),
		.end_pa = addr_map_pcie_c6_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c6_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c6_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x40U,
	},
	{
		.start_pa = addr_map_pcie_c7_ctl_base_r(),
		.end_pa = addr_map_pcie_c7_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c7_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c7_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x80U,
	},
	{
		.start_pa = addr_map_pcie_c8_ctl_base_r(),
		.end_pa = addr_map_pcie_c8_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c8_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c8_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x100U,
	},
	{
		.start_pa = addr_map_pcie_c9_ctl_base_r(),
		.end_pa = addr_map_pcie_c9_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c9_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c9_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x200U,
	},
	{
		.start_pa = addr_map_pcie_c10_ctl_base_r(),
		.end_pa = addr_map_pcie_c10_ctl_limit_r(),
		.start_abs_pa = addr_map_pcie_c10_ctl_base_r(),
		.end_abs_pa = addr_map_pcie_c10_ctl_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pcie_ctl_alist,
		.alist_size = ARRAY_SIZE(t234_pcie_ctl_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x400U,
	},
};

struct hwpm_resource_aperture t234_display_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_NVDISPLAY0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_NVDISPLAY0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_NVDISPLAY0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_disp_base_r(),
		.end_pa = addr_map_disp_limit_r(),
		.start_abs_pa = addr_map_disp_base_r(),
		.end_abs_pa = addr_map_disp_limit_r(),
		.fake_registers = NULL,
		.alist = t234_disp_alist,
		.alist_size = ARRAY_SIZE(t234_disp_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_mss_channel_map[] = {
	{
		.start_pa = addr_map_mc0_base_r(),
		.end_pa = addr_map_mc0_limit_r(),
		.start_abs_pa = addr_map_mc0_base_r(),
		.end_abs_pa = addr_map_mc0_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc1_base_r(),
		.end_pa = addr_map_mc1_limit_r(),
		.start_abs_pa = addr_map_mc1_base_r(),
		.end_abs_pa = addr_map_mc1_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = addr_map_mc2_base_r(),
		.end_pa = addr_map_mc2_limit_r(),
		.start_abs_pa = addr_map_mc2_base_r(),
		.end_abs_pa = addr_map_mc2_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x4U,
	},
	{
		.start_pa = addr_map_mc3_base_r(),
		.end_pa = addr_map_mc3_limit_r(),
		.start_abs_pa = addr_map_mc3_base_r(),
		.end_abs_pa = addr_map_mc3_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x8U,
	},
	{
		.start_pa = addr_map_mc4_base_r(),
		.end_pa = addr_map_mc4_limit_r(),
		.start_abs_pa = addr_map_mc4_base_r(),
		.end_abs_pa = addr_map_mc4_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x10U,
	},
	{
		.start_pa = addr_map_mc5_base_r(),
		.end_pa = addr_map_mc5_limit_r(),
		.start_abs_pa = addr_map_mc5_base_r(),
		.end_abs_pa = addr_map_mc5_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x20U,
	},
	{
		.start_pa = addr_map_mc6_base_r(),
		.end_pa = addr_map_mc6_limit_r(),
		.start_abs_pa = addr_map_mc6_base_r(),
		.end_abs_pa = addr_map_mc6_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x40U,
	},
	{
		.start_pa = addr_map_mc7_base_r(),
		.end_pa = addr_map_mc7_limit_r(),
		.start_abs_pa = addr_map_mc7_base_r(),
		.end_abs_pa = addr_map_mc7_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x80U,
	},
	{
		.start_pa = addr_map_mc8_base_r(),
		.end_pa = addr_map_mc8_limit_r(),
		.start_abs_pa = addr_map_mc8_base_r(),
		.end_abs_pa = addr_map_mc8_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x100U,
	},
	{
		.start_pa = addr_map_mc9_base_r(),
		.end_pa = addr_map_mc9_limit_r(),
		.start_abs_pa = addr_map_mc9_base_r(),
		.end_abs_pa = addr_map_mc9_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x200U,
	},
	{
		.start_pa = addr_map_mc10_base_r(),
		.end_pa = addr_map_mc10_limit_r(),
		.start_abs_pa = addr_map_mc10_base_r(),
		.end_abs_pa = addr_map_mc10_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x400U,
	},
	{
		.start_pa = addr_map_mc11_base_r(),
		.end_pa = addr_map_mc11_limit_r(),
		.start_abs_pa = addr_map_mc11_base_r(),
		.end_abs_pa = addr_map_mc11_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x800U,
	},
	{
		.start_pa = addr_map_mc12_base_r(),
		.end_pa = addr_map_mc12_limit_r(),
		.start_abs_pa = addr_map_mc12_base_r(),
		.end_abs_pa = addr_map_mc12_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1000U,
	},
	{
		.start_pa = addr_map_mc13_base_r(),
		.end_pa = addr_map_mc13_limit_r(),
		.start_abs_pa = addr_map_mc13_base_r(),
		.end_abs_pa = addr_map_mc13_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x2000U,
	},
	{
		.start_pa = addr_map_mc14_base_r(),
		.end_pa = addr_map_mc14_limit_r(),
		.start_abs_pa = addr_map_mc14_base_r(),
		.end_abs_pa = addr_map_mc14_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x4000U,
	},
	{
		.start_pa = addr_map_mc15_base_r(),
		.end_pa = addr_map_mc15_limit_r(),
		.start_abs_pa = addr_map_mc15_base_r(),
		.end_abs_pa = addr_map_mc15_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_channel_alist,
		.alist_size = ARRAY_SIZE(t234_mss_channel_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x8000U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTA0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTA0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTA0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTA1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTA1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTA1_PERFMON_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTA2_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTA2_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTA2_PERFMON_DT,
		.index_mask = 0x4U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTA3_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTA3_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTA3_PERFMON_DT,
		.index_mask = 0x8U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTB0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTB0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTB0_PERFMON_DT,
		.index_mask = 0x10U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTB1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTB1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTB1_PERFMON_DT,
		.index_mask = 0x20U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTB2_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTB2_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTB2_PERFMON_DT,
		.index_mask = 0x40U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTB3_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTB3_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTB3_PERFMON_DT,
		.index_mask = 0x80U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTC0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTC0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTC0_PERFMON_DT,
		.index_mask = 0x100U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTC1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTC1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTC1_PERFMON_DT,
		.index_mask = 0x200U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTC2_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTC2_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTC2_PERFMON_DT,
		.index_mask = 0x400U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTC3_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTC3_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTC3_PERFMON_DT,
		.index_mask = 0x800U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTD0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTD0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTD0_PERFMON_DT,
		.index_mask = 0x1000U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTD1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTD1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTD1_PERFMON_DT,
		.index_mask = 0x2000U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTD2_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTD2_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTD2_PERFMON_DT,
		.index_mask = 0x4000U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSCHANNELPARTD3_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSCHANNELPARTD3_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSCHANNELPARTD3_PERFMON_DT,
		.index_mask = 0x8000U,
	},
};

struct hwpm_resource_aperture t234_mss_gpu_hub_map[] = {
	{
		.start_pa = addr_map_mss_nvlink_1_base_r(),
		.end_pa = addr_map_mss_nvlink_1_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_1_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_1_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mss_nvlink_2_base_r(),
		.end_pa = addr_map_mss_nvlink_2_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_2_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_2_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x2U,
	},
	{
		.start_pa = addr_map_mss_nvlink_3_base_r(),
		.end_pa = addr_map_mss_nvlink_3_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_3_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_3_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x4U,
	},
	{
		.start_pa = addr_map_mss_nvlink_4_base_r(),
		.end_pa = addr_map_mss_nvlink_4_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_4_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_4_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x8U,
	},
	{
		.start_pa = addr_map_mss_nvlink_5_base_r(),
		.end_pa = addr_map_mss_nvlink_5_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_5_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_5_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x10U,
	},
	{
		.start_pa = addr_map_mss_nvlink_6_base_r(),
		.end_pa = addr_map_mss_nvlink_6_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_6_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_6_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x20U,
	},
	{
		.start_pa = addr_map_mss_nvlink_7_base_r(),
		.end_pa = addr_map_mss_nvlink_7_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_7_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_7_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x40U,
	},
	{
		.start_pa = addr_map_mss_nvlink_8_base_r(),
		.end_pa = addr_map_mss_nvlink_8_limit_r(),
		.start_abs_pa = addr_map_mss_nvlink_8_base_r(),
		.end_abs_pa = addr_map_mss_nvlink_8_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mss_nvlink_alist,
		.alist_size = ARRAY_SIZE(t234_mss_nvlink_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x80U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSNVLHSH0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSNVLHSH0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSNVLHSH0_PERFMON_DT,
		.index_mask = 0xFFU,
	},
};

struct hwpm_resource_aperture t234_mss_iso_niso_hub_map[] = {
	{
		.start_pa = addr_map_mc0_base_r(),
		.end_pa = addr_map_mc0_limit_r(),
		.start_abs_pa = addr_map_mc0_base_r(),
		.end_abs_pa = addr_map_mc0_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc1_base_r(),
		.end_pa = addr_map_mc1_limit_r(),
		.start_abs_pa = addr_map_mc1_base_r(),
		.end_abs_pa = addr_map_mc1_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc2_base_r(),
		.end_pa = addr_map_mc2_limit_r(),
		.start_abs_pa = addr_map_mc2_base_r(),
		.end_abs_pa = addr_map_mc2_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc3_base_r(),
		.end_pa = addr_map_mc3_limit_r(),
		.start_abs_pa = addr_map_mc3_base_r(),
		.end_abs_pa = addr_map_mc3_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc4_base_r(),
		.end_pa = addr_map_mc4_limit_r(),
		.start_abs_pa = addr_map_mc4_base_r(),
		.end_abs_pa = addr_map_mc4_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc5_base_r(),
		.end_pa = addr_map_mc5_limit_r(),
		.start_abs_pa = addr_map_mc5_base_r(),
		.end_abs_pa = addr_map_mc5_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
	},
	{
		.start_pa = addr_map_mc6_base_r(),
		.end_pa = addr_map_mc6_limit_r(),
		.start_abs_pa = addr_map_mc6_base_r(),
		.end_abs_pa = addr_map_mc6_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc7_base_r(),
		.end_pa = addr_map_mc7_limit_r(),
		.start_abs_pa = addr_map_mc7_base_r(),
		.end_abs_pa = addr_map_mc7_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to7_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to7_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc8_base_r(),
		.end_pa = addr_map_mc8_limit_r(),
		.start_abs_pa = addr_map_mc8_base_r(),
		.end_abs_pa = addr_map_mc8_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc8_res_mss_iso_niso_hub_alist,
		.alist_size = ARRAY_SIZE(t234_mc8_res_mss_iso_niso_hub_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSHUB0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSHUB0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSHUB0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSHUB1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSHUB1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSHUB1_PERFMON_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_mss_mcf_map[] = {
	{
		.start_pa = addr_map_mc0_base_r(),
		.end_pa = addr_map_mc0_limit_r(),
		.start_abs_pa = addr_map_mc0_base_r(),
		.end_abs_pa = addr_map_mc0_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to1_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to1_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc1_base_r(),
		.end_pa = addr_map_mc1_limit_r(),
		.start_abs_pa = addr_map_mc1_base_r(),
		.end_abs_pa = addr_map_mc1_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc0to1_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc0to1_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc2_base_r(),
		.end_pa = addr_map_mc2_limit_r(),
		.start_abs_pa = addr_map_mc2_base_r(),
		.end_abs_pa = addr_map_mc2_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc2to7_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc2to7_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc3_base_r(),
		.end_pa = addr_map_mc3_limit_r(),
		.start_abs_pa = addr_map_mc3_base_r(),
		.end_abs_pa = addr_map_mc3_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc2to7_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc2to7_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc4_base_r(),
		.end_pa = addr_map_mc4_limit_r(),
		.start_abs_pa = addr_map_mc4_base_r(),
		.end_abs_pa = addr_map_mc4_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc2to7_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc2to7_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc5_base_r(),
		.end_pa = addr_map_mc5_limit_r(),
		.start_abs_pa = addr_map_mc5_base_r(),
		.end_abs_pa = addr_map_mc5_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc2to7_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc2to7_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc6_base_r(),
		.end_pa = addr_map_mc6_limit_r(),
		.start_abs_pa = addr_map_mc6_base_r(),
		.end_abs_pa = addr_map_mc6_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc2to7_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc2to7_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mc7_base_r(),
		.end_pa = addr_map_mc7_limit_r(),
		.start_abs_pa = addr_map_mc7_base_r(),
		.end_abs_pa = addr_map_mc7_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mc2to7_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mc2to7_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = addr_map_mcb_base_r(),
		.end_pa = addr_map_mcb_limit_r(),
		.start_abs_pa = addr_map_mcb_base_r(),
		.end_abs_pa = addr_map_mcb_limit_r(),
		.fake_registers = NULL,
		.alist = t234_mcb_mss_mcf_alist,
		.alist_size = ARRAY_SIZE(t234_mcb_mss_mcf_alist),
		.is_ip = true,
		.dt_aperture = T234_SOC_HWPM_INVALID_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSMCFCLIENT0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSMCFCLIENT0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSMCFCLIENT0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSMCFMEM0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSMCFMEM0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSMCFMEM0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_MSSMCFMEM1_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_MSSMCFMEM1_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_MSSMCFMEM1_PERFMON_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_pma_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = PERFMON_BASE(T234_SOC_HWPM_SYS0_PERFMON_DT),
		.end_abs_pa = PERFMON_LIMIT(T234_SOC_HWPM_SYS0_PERFMON_DT),
		.fake_registers = NULL,
		.alist = t234_perfmon_alist,
		.alist_size = ARRAY_SIZE(t234_perfmon_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_SYS0_PERFMON_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = addr_map_pma_base_r(),
		.end_abs_pa = addr_map_pma_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pma_res_pma_alist,
		.alist_size = ARRAY_SIZE(t234_pma_res_pma_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PMA_DT,
		.index_mask = 0x1U,
	},
};

struct hwpm_resource_aperture t234_cmd_slice_rtr_map[] = {
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = addr_map_pma_base_r(),
		.end_abs_pa = addr_map_pma_limit_r(),
		.fake_registers = NULL,
		.alist = t234_pma_res_cmd_slice_rtr_alist,
		.alist_size = ARRAY_SIZE(t234_pma_res_cmd_slice_rtr_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_PMA_DT,
		.index_mask = 0x1U,
	},
	{
		.start_pa = 0,
		.end_pa = 0,
		.start_abs_pa = addr_map_rtr_base_r(),
		.end_abs_pa = addr_map_rtr_limit_r(),
		.fake_registers = NULL,
		.alist = t234_rtr_alist,
		.alist_size = ARRAY_SIZE(t234_rtr_alist),
		.is_ip = false,
		.dt_aperture = T234_SOC_HWPM_RTR_DT,
		.index_mask = 0x1U,
	},
};

#endif /* T234_SOC_HWPM_IP_MAP_H */
